/* xxxNOTES BELOWxxx */
/* 1. Fading Buttons - "Fade in Effect" */
.btn {
  background-color: #ddd;
  border: none;
  color: black;
  padding: 16px 32px;
  text-align: center;
  font-size: 16px;
  margin: 4px 2px;
  transition: 0.3s;
}
.btn:hover {
  background-color: #3e8e41;
  color: white;
}
/* 2. Hover Tooltip - "Top" */
.tooltip {
  position: relative;
  display: inline-block;
  /* border-bottom: 1px dotted black; */
}
.tooltip .tooltiptext {
  visibility: hidden;
  width: 120px;
  background-color: black;
  color: #fff;
  text-align: center;
  border-radius: 6px;
  padding: 5px 0px;
  /* Position the tooltip */
  position: absolute;
  z-index: 1;
  width: 120px;
  bottom: 100%;
  left: 50%;
  margin-left: -60px; /* Use half of the width (120/2 = 60), to center the tooltip */
}
.tooltip:hover .tooltiptext {
  visibility: visible;
}

/* Notes on CSS
Inline CSS, Internal CSS, External CSS
id, class
div, span
Last Rule, Specificity, Universal Selector
Colors
  RGB, RGBA, HEX
Pixels, Font-Size, Width, Height
Percent Values
Em-Rem Values
  Note: rem is relative to root; em is relative to parent. Both are relative units and are equal to default browser style 16px.
VH And VW
Default Browser Syles
Calc Function
  height: calc(50px + 0.5);
Fonts
  font-family, font-weight, font-style
  font: font-style font-variant font-weight font-size/line-height font-family;
Text Properties
  text-align, text-indent, line-height, letter-spacing, word-spacing, text-transform, text-decoration
Padding, Margin, Border, Border-Radius, Outline
<style>border: 20px solid black;</style>
box-sizing: border-box;
display: flex|inline-block|block|inline;
display: none;, opacity, visibility
Background-Image-Property
  Background-Repeat, Background-Size, Background-Position, Background-Attachment
Linear-Gradient
  <div style="background: linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5)), url(#) center/cover fixed no-repeat;">
    This is DIV
  </div>
Float Property (and Clear)
Position Property
Media Queries
    @media screen and ()
Z-Index
::Before and ::After Pseudo Elements (Note: Does not work with with img)
Descendant and Child Selectors/Combinators
  <head>
    <style>
        body div {}
        body > div {}
    <style>
  </head>
  <body>
    <section>
      <div>
        <span></span>
        </div>
    </section>
    <div>
      <p></p>
    </div>
  <body>
Pseudo-element
  ::before, ::after, ::first-line, ::first-letter
Pseudo-class
  :hover, :link, :visited, :active
Root pseudo-class
  Note: Styles the root element of the document. Used mostly for general styles and can be used with CSS variables.
  <style>
    :root {
      font-size: 150%;
    }
    div {
      font-size: 16px;
    }
    span {
      font-size: 1rem;
    }
    </style>
Transform
  Note: Applies a 2D or 3D transformation to an element.
  translate (), rotate (), scale (), skew ()
Transition
  Note: Change over time.
  transition-property: ; transition-duration: ; transition-delay: ; transition-timing-function: ;
  <style>
    transition: background 0.25s 2s, border-radius 0.25s 2s;
  </style>
  ease = default; slow start, fast, slow end
  linear = same speed start to end
  ease-in = slow start
  ease-out = slow end
  ease-in-out = slow start, fast, slow end
Animation
  Note: Change over time with points.
  animation-name: ; animation-duration: ; animation-iteration-count: 2;
  <style>
    .animation {
      background: black;
      animation: move 5s infinite;
    }
    @keyframes move {
      0% {
        transform: 50px;
      }
      20% {
        transform: 100px;
      }
      60% {
        transform: 150px;
      }
      100% {
        transform: 200px;
      }
    }
  </style>
  animation-fill-mode: forwards|backwards|both;
  animation-direction: normal|reverse|alternate|alternate-reverse;
CSS Variables (a.k.a. custom properties)
  --varName: value;
  property: var(--varName);
  scope (:root{} === global, element === local)
  Can be used with any property.
    <head>
      <style>
        :root {
        --blue: #1e90ff;
        --weirdNameForColor: #f15025;
        --mainTransition: all 0.25s ease;
        }
        h2 {
          color: var(--blue);
          transition: var(mainTransition);
        }
        h2:hover {
          color: var(--weirdNameForColor);
        }
        div {
          --white: #ffffff;
          border: 2px solid var(--blue);
        }
        span {
          background-color: var(--white);
        }
      </style>
    </head>
    <body>
      <h2></h2>
      <div>
        <span></span>
      </div>
    </body>
text-shadow, box-shadow
  text-shadow: x-axis y-axis blur spread color;
  box-shadow: x-axis y-axis blur spread color;
  <style>
    text-shadow: 5px 5px 3px black;
  </style>
Browser Prefixes
  <style>
    .example {
    display: -ms-grid;
    display: grid;
    -webkit-transition: all .5s;
    -o-transition: all .5s;
    transition: all .5s;
    -webkit-user-select: none;
      -moz-user-select: none;
        -ms-user-select: none;
            user-select: none;
    background: -webkit-gradient(linear, left top, left bottom, from(white), to(black));
    background: -o-linear-gradient(top, white, black);
    background: linear-gradient(to bottom, white, black);
    }
  </style>
Semantic HTML (Semantic Tags)
  Note: A semantic element clearly describes its meaning to both the browser and the developer. Examples of non-semantic elements: <div> and <span>; tells nothing about its content. Examples of semantic elements: <aside>, <details>, <figcaption>, <figure>, <footer>, <header>, <main>, <mark>, <nav>, <section>, <summary>, <time>, <form>, <table>, and <article>; clearly defines its content.
Emmet Snippets
  h1.banner ===
    <h1 class="banner"></h1>
  p#special ===
    <p id="special"></p>
  #section.homeC1.homeC2 ===
    <div id="section" class="homeC1 homeC2"></div>
  div>ul>li*3 ===
    <div>
      <ul>
        <li></li>
        <li></li>
        <li></li>
      </ul>
    </div>
  p{some text} ===
    <p>some text</p>
  ul>li*3{$} ===
    <ul>
      <li>1<li>
      <li>2<li>
      <li>3<li>
    </ul>
*/
